#Description of the picture generated using noun with the the sentence around, which according to english
#language rules has to be with the Indefinite Article + if there is a name(starts with uppercase) then no
#article will be used.



module DescriptionTextExport


  include ImageToText;
  include CacheKnowledge;



  def construct
    #here access should get through the db to NOUN
    @noun = Noun.find(params[:id])

    #check if the word starts with vovels
    if @noun.start_with?('a','e','i','o','u')
      puts 'There is an ',@noun,' in this picture'
      #still need to do output to the description


    #check if word starts with consonants and does not contain uppercase letters
    else if !(@noun.start_with?('a','e','i','o','u','y')) && checkUpper==false

           puts 'There is a ',@noun,' in this picture'
           #still need to do output to the description


    #check if word starts with uppercase vovels
    else if @noun.start_with?('A','E','I','O','U','Y')
           puts 'There is ',@noun,' in this picture'
           #still need to do output to the description

    #check if word starts with uppercase consonants
         else if !(@noun.start_with?('A','E','I','O','U','Y')) && checkUpper==true

           puts 'There is ',@noun,' in this picture'
           #still need to do output to the description




              end

         end
    end
    end
  end



    def checkUpper
      if (/^[[:upper:]]/.match(@noun))
      return true

      else
      return false
      end
    end

    def checkLower
      if !(/^[[:upper:]]/.match(@noun))
        return true

      else
        return false
      end

    end





    #generates new Noun
    def new
      @noun = Noun.new(noun_params)
    end





  def noun_params
    params.require(:noun).permit(:ID)
  end

end



