#Description of the picture generated using noun with the the sentence around, which according to english
#language rules has to be with the Indefinite Article + if there is a name(starts with uppercase) then no
#article will be used.



module DescriptionTextExport


  include ImageToText;
  include CacheKnowledge;



  def construct(text)
    #here noun is received through the parameter "text"
    #sure this is not working yet
    @noun = text

    #check if the word starts with vovels
    if @noun.start_with?('a','e','i','o','u')
      #output to terminal
      puts "There is an #{@noun} in this picture"

      #not sure if works, maybe need to make prepared statement
      @word = Image.find(params[:id])
      @word.update_attributes!(processed_description: "There is an #{@noun} in this picture")




    #check if word starts with consonants and does not contain uppercase letters
    else if !(@noun.start_with?('a','e','i','o','u','y')) && checkUpper==false

           #output to terminal
           puts "There is a #{@noun} in this picture"

           #not sure if works, maybe need to make prepared statement
           @word = Image.find(params[:id])
           @word.update_attributes!(processed_description: "There is a #{@noun} in this picture")


    #check if word starts with uppercase vovels
    else if @noun.start_with?('A','E','I','O','U','Y')

           #output to terminal
           puts "There is #{@noun} in this picture"
           #not sure if works, maybe need to make prepared statement
           @word = Image.find(params[:id])
           @word.update_attributes!(processed_description: "There is #{@noun} in this picture")

    #check if word starts with uppercase consonants
    else if !(@noun.start_with?('A','E','I','O','U','Y')) && checkUpper==true

           #output to terminal
           puts "There is #{@noun} in this picture"
           #not sure if works, maybe need to make prepared statement
           @word = Image.find(params[:id])
           @word.update_attributes!(processed_description: "There is #{@noun} in this picture")




              end

         end
    end
    end
  end



    def checkUpper
      if (/^[[:upper:]]/.match(@noun))
      return true

      else
      return false
      end
    end

    def checkLower
      if !(/^[[:upper:]]/.match(@noun))
        return true

      else
        return false
      end

    end





    #generates new Noun
    def new
      @noun = Noun.new(noun_params)
    end





  def noun_params
    params.require(:noun).permit(:ID)
  end

end



